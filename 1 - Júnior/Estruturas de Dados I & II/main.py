from vetores import vetor
from listas import lista_ligada, lista_duplamente_ligada
from pilhas import pilha
from filas import fila
from conjuntos import conjunto
from espalhamento import tabela_espalhamento
from mapas import mapa
from arvores import arvore, no_arvore_inteiro
from array import array
'''
vetor_inteiros = array('b', [1, 2, 3, 5, 6])
print(vetor_inteiros)
print(type(vetor_inteiros))
vetor_inteiros.insert(3, 4)
print(vetor_inteiros)
print(vetor_inteiros.index(3))
'''

print(f"{30*'-'} MENU {30*'-'}")
print('1. Vetores')
print('2. Listas Ligadas')
print('3. Listas Duplamente Ligadas')
print('4. Pilhas')
print('5. Filas')
print('6. Conjuntos')
print('7. Tabelas de Espalhamento')
print('8. Mapas')
print('9. Árvores')

menu = int(input('Digite a opção desejada: '))

if menu == 1:
    vetor_teste = vetor.Vetor()
    print(f'Tamanho do Vetor: {vetor_teste.tamanho_vetor()}')
    vetor_teste.inserir_elemento_final(1)
    vetor_teste.inserir_elemento_final(2)
    vetor_teste.inserir_elemento_final(3)
    vetor_teste.inserir_elemento_final(5)
    print(f'Tamanho do Vetor: {vetor_teste.tamanho_vetor()}')
    vetor_teste.inserir_elemento_final(6)
    vetor_teste.inserir_elemento_posicao(5, 4)
    print(vetor_teste)
    print(type(vetor_teste))
    print(vetor_teste.listar_elemento(0))
    print(vetor_teste.listar_elemento(1))
    print(vetor_teste.listar_elemento(2))
    print(vetor_teste.listar_elemento(4))
    print(f'Tamanho do Vetor: {vetor_teste.tamanho_vetor()}')
    print(vetor_teste.contem(4))
    print(vetor_teste.indice(4))
    print(vetor_teste.contem(0))
    print(vetor_teste.indice(0))
    print(f'O elemento {vetor_teste.remover_elemento_indice(0)} foi removido')
    print(vetor_teste)
    print(f'Tamanho do Vetor: {vetor_teste.tamanho_vetor()}')
    print(vetor_teste.listar_elemento(4))
    print(f'O elemento {vetor_teste.remover_elemento(4)} foi removido')
    print(vetor_teste)
    print(f'Tamanho do Vetor: {vetor_teste.tamanho_vetor()}')
    print(vetor_teste.listar_elemento(3))

elif menu == 2:
    lista_teste = lista_ligada.ListaLigada()
    print(type(lista_teste))
    lista_teste.inserir(1)
    lista_teste.inserir(2)
    lista_teste.inserir(3)
    print(lista_teste)
    print(lista_teste.recuperar_elemento_no(3))
    print(f'Tamanho da Lista Ligada: {lista_teste.tamanho_lista_ligada()}')
    lista_teste.inserir_posicao(3, 4)
    print(lista_teste)
    print(f'Tamanho da Lista Ligada: {lista_teste.tamanho_lista_ligada()}')
    print(lista_teste.contem(3))
    print(lista_teste.indice(3))
    print(lista_teste.contem(5))
    print(lista_teste.indice(5))
    lista_teste.remover_posicao(3)
    print(f'Tamanho da Lista Ligada: {lista_teste.tamanho_lista_ligada()}')
    print(lista_teste)
    lista_teste.remover_elemento(3)
    print(f'Tamanho da Lista Ligada: {lista_teste.tamanho_lista_ligada()}')
    print(lista_teste)

elif menu == 3:
    lista_teste = lista_duplamente_ligada.ListaDuplamenteLigada()
    print(type(lista_teste))
    lista_teste.inserir(1)
    lista_teste.inserir(2)
    lista_teste.inserir(3)
    print(lista_teste)
    print(f'Tamanho do Vetor: {lista_teste.tamanho_lista_duplamente_ligada()}')
    lista_teste.inserir_posicao(1, 4)
    print(lista_teste)
    print(f'Tamanho do Vetor: {lista_teste.tamanho_lista_duplamente_ligada()}')
    lista_teste.remover_elemento(4)
    print(lista_teste)
    print(f'Tamanho do Vetor: {lista_teste.tamanho_lista_duplamente_ligada()}')
    lista_teste.remover_posicao(1)
    print(lista_teste)
    print(f'Tamanho do Vetor: {lista_teste.tamanho_lista_duplamente_ligada()}')

elif menu == 4:
    pilha_teste = pilha.Pilha()

    print(type(pilha_teste))
    pilha_teste.empilhar(1)
    pilha_teste.empilhar(2)
    pilha_teste.empilhar(3)
    print(pilha_teste)
    print(f'Topo da Pilha: {pilha_teste.topo()}')
    print(f'Tamanho da Pilha: {pilha_teste.tamanho_pilha()}')
    print(f'Elemento removido a Pilha: {pilha_teste.desempilhar()}')
    print(pilha_teste)
    print(f'Topo da Pilha: {pilha_teste.topo()}')
    print(f'Tamanho da Pilha: {pilha_teste.tamanho_pilha()}')

elif menu == 5:
    fila_teste = fila.Fila()
    
    print(type(fila_teste))
    fila_teste.enfileirar(1)
    fila_teste.enfileirar(2)
    fila_teste.enfileirar(3)
    print(fila_teste)
    print(f'Elemento da Frente da Fila: {fila_teste.frente()}')
    print(f'Tamanho da Fila: {fila_teste.tamanho_fila()}')
    print(f'Elemento Removido da Frente da Fila: {fila_teste.desenfileirar()}')
    print(fila_teste)
    print(f'Elemento da Frente da Fila: {fila_teste.frente()}')
    print(f'Tamanho da Fila: {fila_teste.tamanho_fila()}')

elif menu == 6:
    conjunto_teste = conjunto.Conjunto()

    print(type(conjunto_teste))
    conjunto_teste.inserir(1)
    conjunto_teste.inserir(2)
    conjunto_teste.inserir(3)
    conjunto_teste.inserir(2)
    print(conjunto_teste)
    print(f'Tamanho do Conjunto> {conjunto_teste.tamanho_conjunto()}')
    #conjunto_teste.inserir_posicao(1, 4)
    conjunto_teste.remover_elemento(2)
    print(conjunto_teste)
    print(f'Tamanho do Conjunto> {conjunto_teste.tamanho_conjunto()}')
    print(conjunto_teste.contem(2))
    #print(conjunto_teste.indice(2))
    print(conjunto_teste.contem(4))
    #print(conjunto_teste.indice(4))
    conjunto_teste.inserir("Python")
    print(conjunto_teste)
    conjunto_teste.inserir(2)
    print(conjunto_teste)

elif menu == 7:
    tabela_teste = tabela_espalhamento.TabelaEspalhamento()

    print(type(tabela_teste))
    tabela_teste.inserir(1)
    tabela_teste.inserir(2)
    tabela_teste.inserir(3)
    tabela_teste.inserir('Python')
    print(tabela_teste)
    print(f'Tamanho da Tabela de Espalhamento: {tabela_teste.tamanho()}')
    print(tabela_teste.contem(3))
    tabela_teste.remover('Python')
    print(tabela_teste)
    print(f'Tamanho da Tabela de Espalhamento: {tabela_teste.tamanho()}')

elif menu == 8:
    mapa_teste = mapa.Mapa()

    print(type(mapa_teste))
    mapa_teste.adicionar('Python', 1)
    mapa_teste.adicionar('C++', 2)
    mapa_teste.adicionar('Golang', 3)
    print(mapa_teste)
    print(f'Tamanho do Mapa: {mapa_teste.tamanho_mapa()}')
    print(mapa_teste.contem_chave('C++'))
    print(mapa_teste.recuperar('Golang'))
    mapa_teste.remover('Python')
    print(mapa_teste)
    print(f'Tamanho do Mapa: {mapa_teste.tamanho_mapa()}')

elif menu == 9:
    arvore_teste = arvore.Arvore()

    print(type(arvore_teste))
    arvore_teste.inserir_elemento(no_arvore_inteiro.NoArvoreInteiro(5))
    arvore_teste.inserir_elemento(no_arvore_inteiro.NoArvoreInteiro(4))
    arvore_teste.inserir_elemento(no_arvore_inteiro.NoArvoreInteiro(6))
    arvore_teste.inserir_elemento(no_arvore_inteiro.NoArvoreInteiro(8))
    arvore_teste.inserir_elemento(no_arvore_inteiro.NoArvoreInteiro(7))
    print(arvore_teste)
    print(arvore_teste.buscar(no_arvore_inteiro.NoArvoreInteiro(7)))
    print('EM ORDEM:')
    arvore_teste.em_ordem()
    print('PRÉ ORDEM:')
    arvore_teste.pre_ordem()
    print('PÓS ORDEM:')
    arvore_teste.pos_ordem()
    print(f'Altura da Árvore: {arvore_teste.altura()}')

else:
    print('Opção Inválida')